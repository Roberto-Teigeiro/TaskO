version: 0.1 
component: build
timeoutInSeconds: 600
shell: bash

env:
  variables:
    JAVA_HOME: /usr/lib64/graalvm/graalvm22-ee-java17
    DOCKER_REGISTRY: mx-queretaro-1.ocir.io/axuo1dsetmvp/todoapp/mu2bm

  exportedVariables:
    - BuildServiceDemoVersion

steps:

  - type: Command
    name: "Install GraalVM Enterprise 22.x Native Image for Java17"
    command: yum -y install graalvm22-ee-17-native-image

  - type: Command
    name: "Set PATH Variable"
    command: export PATH=$JAVA_HOME/bin:$PATH

  - type: Command
    name: "Install Compatible Node.js 20"
    command: |
      # Install Node.js 20 LTS directly from NodeSource with compatibility fixes
      curl -fsSL https://rpm.nodesource.com/setup_20.x | bash -
      yum install -y nodejs
      # Verify Node.js installation
      node --version
      npm --version

  - type: Command
    name: "Download SSL Certificates"
    command: |
      cd MtdrSpring/backend/frontend-service
      oci os object get --bucket-name todoapp-mu2bm --name ssl-certificates.tar.gz --file ssl-certificates.tar.gz
      tar -xzf ssl-certificates.tar.gz
      ls -la *.crt *.key  # Verify files are extracted

  - type: Command
    name: "Docker Login"
    command: |
      cd MtdrSpring
      oci os object get --bucket-name todoapp-mu2bm --name deployment_config.tgz --file deployment_config.tgz
      tar -xzvf deployment_config.tgz
      source env.sh
      echo "Contents of at.cfg:"
      cat at.cfg
      echo "End of at.cfg contents"
      cat at.cfg | docker login -u "axuo1dsetmvp/a01643651@tec.mx" --password-stdin mx-queretaro-1.ocir.io
      
  - type: Command
    name: "Build"
    command: |
      cd MtdrSpring
      source env.sh
      (cd backend && source build.sh)

  - type: Command
    name: "Create Deployment Artifacts"
    command: |
      cd MtdrSpring
      # Create deployment artifacts directory if it doesn't exist
      mkdir -p deployment-artifacts
      
      # Copy Kubernetes manifests to deployment artifacts
      cp backend/tasko.yaml deployment-artifacts/
      
      # Create deployment script
      cat > deployment-artifacts/deploy.sh << 'EOF'
      #!/bin/bash
      kubectl apply -f tasko.yaml
      EOF
      chmod +x deployment-artifacts/deploy.sh
      
      # Create artifact archive
      tar -czf deployment-package.tar.gz deployment-artifacts/

outputArtifacts:
  - name: kubernetes-manifests
    type: BINARY
    location: MtdrSpring/backend/tasko.yaml
  
  - name: deployment-package
    type: BINARY
    location: MtdrSpring/deployment-package.tar.gz



